class Node:
    def __init__(self,data,level,fvalue):                           
        self.data = data
        self.level = level
        self.fvalue = fvalue

    def generate_child(self):                                               
                                                                            
        x,y = self.find(self.data, '_')                                     

        directions_list = [[x,y-1],[x,y+1],[x-1,y],[x+1,y]]                 
        children = []                                                       
        for i in directions_list:
            child = self.shuffle(self.data, x, y, i[0], i[1])               
            if child is not None:
                child_node = Node(child, self.level+1, 0)                   
                children.append(child_node)                                 
        return children
        
    def shuffle(self, puzzle, x1, y1, x2, y2):                              
        if x2 >= 0 and x2 < len(self.data) and y2 >= 0 and y2 < len(self.data):
            temp_puzzle = []                                                
            temp_puzzle = self.copy(puzzle)                                 
            temp = temp_puzzle[x2][y2]
            temp_puzzle[x2][y2] = temp_puzzle[x1][y1]
            temp_puzzle[x1][y1] = temp
            return temp_puzzle
        else:                                                               
            return None
            

    def copy(self,root):                                                    
        temp = []
        for i in root:
            t = []
            for j in i:
                t.append(j)
            temp.append(t)
        return temp    
            
    def find(self,puz,x):                                                   
        for i in range(0,len(self.data)):
            for j in range(0,len(self.data)):
                if puz[i][j] == x:
                    return i,j


class Puzzle:
    def __init__(self,size):                                                
        self.n = size                                                       
        self.open = []                                                      
        self.closed = []                                                    

    def accept(self):
        puz = []    
        for i in range(0,self.n):                                   
            temp = input().split(" ")                                       
            puz.append(temp)
        return puz

    def f(self,start, goal):
        return self.h(start.data, goal) + start.level                       

    def h(self, start, goal):                                                
        temp = 0
        for i in range(0,self.n):
            for j in range(0,self.n):
                if start[i][j] != goal[i][j] and start[i][j] != '_':        
                    temp += 1                                               
        return temp
        

    def astar(self):
        print("Enter the start state matrix ")                            
        start = self.accept()                                               
        
        print("Enter the goal state matrix ")                         
        goal = self.accept()                                                

        start = Node(start,0,0)                                             
        start.fvalue = self.f(start, goal)                                  
        
        self.open.append(start)                                             
        print("\n\n")   
        while True:
            current_node = self.open[0]                                     
            print("\n  || \n \\\'\'/ \n")
    
            for i in current_node.data:                                     
                for j in i:
                    print(j,end=" ")
                print("")
           
            if(self.h(current_node.data,goal) == 0):                        
                break
            
            for i in current_node.generate_child():
                i.fvalue = self.f(i,goal)                                   
                self.open.append(i)                                         
            self.closed.append(current_node)                                
            del self.open[0]                                                

            self.open.sort(key = lambda x:x.fvalue, reverse=False)           
    
npuzzle = Puzzle(3)
npuzzle.astar()


# Output 

# Enter the start state matrix 
# _ 1 3
# 4 2 5
# 7 8 6
# Enter the goal state matrix 
# 1 2 3
# 4 5 6
# 7 8 _






